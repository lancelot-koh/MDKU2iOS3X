"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorMessage_1 = require("../../ErrorHandling/ErrorMessage");
var ODataHelper_1 = require("../ODataHelper");
var ChangeSetManager = /** @class */ (function () {
    function ChangeSetManager(dataService) {
        this.service = dataService;
        this.pendingEntityReadLinkOrdinalSuffix = 0;
        this.pendingChangeSet = null;
    }
    ChangeSetManager.isPending = function (entity) {
        var readLink = entity.getReadLink();
        return readLink == null || readLink.startsWith(ChangeSetManager.UNPROCESSEDPREFIX);
    };
    ChangeSetManager.prototype.beginChangeSet = function () {
        if (this.pendingChangeSet != null) {
            throw new Error(ErrorMessage_1.ErrorMessage.ODATA_CHANGESET_ALREADY_EXISTS);
        }
        this.pendingChangeSet = ODataHelper_1.ODataHelper.createChangeSet();
        this.pendingEntityReadLinkOrdinalSuffix = 0;
    };
    ChangeSetManager.prototype.cancelChangeSet = function () {
        this.pendingChangeSet = null;
        this.pendingEntityReadLinkOrdinalSuffix = 0;
    };
    ChangeSetManager.prototype.commitChangeSet = function () {
        var changeSet = this.pendingChangeSet;
        if (changeSet == null) {
            throw new Error(ErrorMessage_1.ErrorMessage.ODATA_COMMIT_EMPTY_CHANGESET_NOT_ALLOWED);
        }
        this.pendingChangeSet = null;
        this.pendingEntityReadLinkOrdinalSuffix = 0;
        this.processBatchWithChangeSet(changeSet);
    };
    ChangeSetManager.prototype.createEntity = function (entity, headers) {
        var changeSet = this.pendingChangeSet;
        if (changeSet != null) {
            this.pendingEntityReadLinkOrdinalSuffix += 1;
            entity.setReadLink(ChangeSetManager.UNPROCESSEDPREFIX + this.pendingEntityReadLinkOrdinalSuffix);
            changeSet.createEntity(entity, headers);
        }
        else {
            this.service.createEntity(entity, headers);
        }
    };
    ChangeSetManager.prototype.createRelatedEntity = function (entity, parentEntity, parentNavProp, headers) {
        var changeSet = this.pendingChangeSet;
        if (changeSet != null) {
            this.pendingEntityReadLinkOrdinalSuffix += 1;
            entity.setReadLink(ChangeSetManager.UNPROCESSEDPREFIX + this.pendingEntityReadLinkOrdinalSuffix);
            changeSet.createRelatedEntity(entity, parentEntity, parentNavProp, headers);
        }
        else {
            this.service.createRelatedEntity(entity, parentEntity, parentNavProp, headers);
        }
    };
    ChangeSetManager.prototype.updateEntity = function (entity, headers) {
        var changeSet = this.pendingChangeSet;
        if (changeSet != null) {
            changeSet.updateEntity(entity, headers);
        }
        else {
            this.service.updateEntity(entity, headers);
        }
    };
    ChangeSetManager.prototype.deleteEntity = function (entity, headers) {
        var changeSet = this.pendingChangeSet;
        if (changeSet != null) {
            changeSet.deleteEntity(entity, headers);
        }
        else {
            this.service.deleteEntity(entity, headers);
        }
    };
    ChangeSetManager.prototype.pendingEntityFromPendingChangeSet = function (readLink) {
        if (!readLink.startsWith(ChangeSetManager.UNPROCESSEDPREFIX)) {
            return null;
        }
        return ODataHelper_1.ODataHelper.entityWithReadLink(this.pendingChangeSet, readLink);
    };
    ChangeSetManager.prototype.processBatchWithChangeSet = function (changeSet) {
        var requestBatch = ODataHelper_1.ODataHelper.createRequestBatch();
        requestBatch.addChanges(changeSet);
        this.service.processBatch(requestBatch);
        var error = changeSet.getError();
        if (error != null) {
            throw error;
        }
    };
    ChangeSetManager.UNPROCESSEDPREFIX = 'pending_';
    return ChangeSetManager;
}());
exports.ChangeSetManager = ChangeSetManager;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ReadService_1 = require("../../ReadService");
var ReadParamsFactory_1 = require("../../ReadParamsFactory");
var CrudParamsHelper_1 = require("../../CrudParamsHelper");
var ErrorMessage_1 = require("../../../../ErrorHandling/ErrorMessage");
var ODataLinker = /** @class */ (function () {
    function ODataLinker(sourceEntitySetName, linkingParams, operation) {
        this.sourceEntitySetName = sourceEntitySetName;
        this.operation = operation;
        this.setNavigationPropertyName(linkingParams);
        this.setTargetReadParams(linkingParams);
    }
    ODataLinker.prototype.execute = function (sourceEntity, dataService, changeSetManager) {
        if (dataService != null) {
            this.setNavigationProperty(dataService);
            this.acquireTargets(dataService, changeSetManager);
        }
        else {
            return null;
        }
    };
    ODataLinker.prototype.setNavigationPropertyName = function (linkingParams) {
        var navigationPropertyName = linkingParams[ODataLinker.PROPERTYKEY];
        if (navigationPropertyName != null && navigationPropertyName.length !== 0) {
            this.navigationPropertyName = navigationPropertyName;
        }
        else {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.ODATA_MALFORMED_PARAM_FOUND, CrudParamsHelper_1.CrudParamsHelper.MALFORMEDPARAM, ODataLinker.PROPERTYKEY));
        }
    };
    ODataLinker.prototype.setTargetReadParams = function (linkingParams) {
        this.targetReadParams = ReadParamsFactory_1.ReadParamsFactory.createReadParams(linkingParams);
    };
    ODataLinker.prototype.setNavigationProperty = function (dataService) {
        if (dataService != null) {
            var entitySet = dataService.getEntitySet(this.sourceEntitySetName);
            this.navigationProperty = entitySet.getEntityType().getProperty(this.navigationPropertyName);
        }
    };
    ODataLinker.prototype.acquireTargets = function (dataService, changeSetManager) {
        this.targets = ReadService_1.ReadService.entitiesFromParams(this.targetReadParams, dataService, changeSetManager);
        if (this.targets.length === 0) {
            throw new Error(ErrorMessage_1.ErrorMessage.ODATA_ZERO_TARGET_RETURNED);
        }
    };
    ODataLinker.PROPERTYKEY = 'property';
    return ODataLinker;
}());
exports.ODataLinker = ODataLinker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT0RhdGFMaW5rZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPRGF0YUxpbmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLGlEQUFnRDtBQUNoRCw2REFBNEQ7QUFDNUQsMkRBQTBEO0FBRTFELHVFQUFzRTtBQUV0RTtJQVdFLHFCQUFtQixtQkFBMkIsRUFBRSxhQUFrQixFQUFFLFNBQTZCO1FBQy9GLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMseUJBQXlCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSw2QkFBTyxHQUFkLFVBQWUsWUFBaUIsRUFBRSxXQUFnQixFQUFFLGdCQUFrQztRQUNwRixFQUFFLENBQUMsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUNyRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFFTywrQ0FBeUIsR0FBakMsVUFBa0MsYUFBa0I7UUFDbEQsSUFBSSxzQkFBc0IsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BFLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixJQUFJLElBQUksSUFBSSxzQkFBc0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7UUFDdkQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLDJCQUEyQixFQUFFLG1DQUFnQixDQUFDLGNBQWMsRUFDM0csV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNILENBQUM7SUFFTyx5Q0FBbUIsR0FBM0IsVUFBNEIsYUFBa0I7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHFDQUFpQixDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTywyQ0FBcUIsR0FBN0IsVUFBOEIsV0FBZ0I7UUFDNUMsRUFBRSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMvRixDQUFDO0lBQ0gsQ0FBQztJQUVPLG9DQUFjLEdBQXRCLFVBQXVCLFdBQWdCLEVBQUUsZ0JBQWtDO1FBQ3pFLElBQUksQ0FBQyxPQUFPLEdBQUcseUJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDcEcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUFZLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0gsQ0FBQztJQXBEdUIsdUJBQVcsR0FBVyxVQUFVLENBQUM7SUFxRDNELGtCQUFDO0NBQUEsQUF0REQsSUFzREM7QUF0RFksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE9EYXRhQ3J1ZE9wZXJhdGlvbiB9IGZyb20gJy4uLy4uL0Jhc2VPRGF0YUNydWRlcic7XG5pbXBvcnQgeyBSZWFkU2VydmljZSB9IGZyb20gJy4uLy4uL1JlYWRTZXJ2aWNlJztcbmltcG9ydCB7IFJlYWRQYXJhbXNGYWN0b3J5IH0gZnJvbSAnLi4vLi4vUmVhZFBhcmFtc0ZhY3RvcnknO1xuaW1wb3J0IHsgQ3J1ZFBhcmFtc0hlbHBlciB9IGZyb20gJy4uLy4uL0NydWRQYXJhbXNIZWxwZXInO1xuaW1wb3J0IHsgQ2hhbmdlU2V0TWFuYWdlciB9IGZyb20gJy4uLy4uL0NoYW5nZVNldE1hbmFnZXInO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vRXJyb3JIYW5kbGluZy9FcnJvck1lc3NhZ2UnO1xuXG5leHBvcnQgY2xhc3MgT0RhdGFMaW5rZXIge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBQUk9QRVJUWUtFWTogc3RyaW5nID0gJ3Byb3BlcnR5JztcblxuICBwcm90ZWN0ZWQgbmF2aWdhdGlvblByb3BlcnR5OiBhbnk7XG4gIHByb3RlY3RlZCB0YXJnZXRSZWFkUGFyYW1zOiBhbnk7XG4gIHByb3RlY3RlZCB0YXJnZXRzOiBhbnk7XG4gIHByb3RlY3RlZCBvcGVyYXRpb246IE9EYXRhQ3J1ZE9wZXJhdGlvbjtcblxuICBwcml2YXRlIHNvdXJjZUVudGl0eVNldE5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBuYXZpZ2F0aW9uUHJvcGVydHlOYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNvdXJjZUVudGl0eVNldE5hbWU6IHN0cmluZywgbGlua2luZ1BhcmFtczogYW55LCBvcGVyYXRpb246IE9EYXRhQ3J1ZE9wZXJhdGlvbikge1xuICAgIHRoaXMuc291cmNlRW50aXR5U2V0TmFtZSA9IHNvdXJjZUVudGl0eVNldE5hbWU7XG4gICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgdGhpcy5zZXROYXZpZ2F0aW9uUHJvcGVydHlOYW1lKGxpbmtpbmdQYXJhbXMpO1xuICAgIHRoaXMuc2V0VGFyZ2V0UmVhZFBhcmFtcyhsaW5raW5nUGFyYW1zKTtcbiAgfVxuXG4gIHB1YmxpYyBleGVjdXRlKHNvdXJjZUVudGl0eTogYW55LCBkYXRhU2VydmljZTogYW55LCBjaGFuZ2VTZXRNYW5hZ2VyOiBDaGFuZ2VTZXRNYW5hZ2VyKSB7XG4gICAgaWYgKGRhdGFTZXJ2aWNlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuc2V0TmF2aWdhdGlvblByb3BlcnR5KGRhdGFTZXJ2aWNlKTtcbiAgICAgIHRoaXMuYWNxdWlyZVRhcmdldHMoZGF0YVNlcnZpY2UsIGNoYW5nZVNldE1hbmFnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE5hdmlnYXRpb25Qcm9wZXJ0eU5hbWUobGlua2luZ1BhcmFtczogYW55KTogdm9pZCB7XG4gICAgbGV0IG5hdmlnYXRpb25Qcm9wZXJ0eU5hbWUgPSBsaW5raW5nUGFyYW1zW09EYXRhTGlua2VyLlBST1BFUlRZS0VZXTtcbiAgICBpZiAobmF2aWdhdGlvblByb3BlcnR5TmFtZSAhPSBudWxsICYmIG5hdmlnYXRpb25Qcm9wZXJ0eU5hbWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLm5hdmlnYXRpb25Qcm9wZXJ0eU5hbWUgPSBuYXZpZ2F0aW9uUHJvcGVydHlOYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoRXJyb3JNZXNzYWdlLmZvcm1hdChFcnJvck1lc3NhZ2UuT0RBVEFfTUFMRk9STUVEX1BBUkFNX0ZPVU5ELCBDcnVkUGFyYW1zSGVscGVyLk1BTEZPUk1FRFBBUkFNLFxuICAgICAgICBPRGF0YUxpbmtlci5QUk9QRVJUWUtFWSkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VGFyZ2V0UmVhZFBhcmFtcyhsaW5raW5nUGFyYW1zOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnRhcmdldFJlYWRQYXJhbXMgPSBSZWFkUGFyYW1zRmFjdG9yeS5jcmVhdGVSZWFkUGFyYW1zKGxpbmtpbmdQYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXROYXZpZ2F0aW9uUHJvcGVydHkoZGF0YVNlcnZpY2U6IGFueSk6IHZvaWQge1xuICAgIGlmIChkYXRhU2VydmljZSAhPSBudWxsKSB7XG4gICAgICBsZXQgZW50aXR5U2V0ID0gZGF0YVNlcnZpY2UuZ2V0RW50aXR5U2V0KHRoaXMuc291cmNlRW50aXR5U2V0TmFtZSk7XG4gICAgICB0aGlzLm5hdmlnYXRpb25Qcm9wZXJ0eSA9IGVudGl0eVNldC5nZXRFbnRpdHlUeXBlKCkuZ2V0UHJvcGVydHkodGhpcy5uYXZpZ2F0aW9uUHJvcGVydHlOYW1lKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFjcXVpcmVUYXJnZXRzKGRhdGFTZXJ2aWNlOiBhbnksIGNoYW5nZVNldE1hbmFnZXI6IENoYW5nZVNldE1hbmFnZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRhcmdldHMgPSBSZWFkU2VydmljZS5lbnRpdGllc0Zyb21QYXJhbXModGhpcy50YXJnZXRSZWFkUGFyYW1zLCBkYXRhU2VydmljZSwgY2hhbmdlU2V0TWFuYWdlcik7XG4gICAgaWYgKHRoaXMudGFyZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihFcnJvck1lc3NhZ2UuT0RBVEFfWkVST19UQVJHRVRfUkVUVVJORUQpO1xuICAgIH1cbiAgfVxufVxuIl19